#!/usr/bin/env bash
LOG="${HOME}/dotfiles.log"
GITHUB_USER="jondatkins"
GITHUB_REPO="dotfiles"
USER_GIT_AUTHOR_NAME="jondatkins"
USER_GIT_AUTHOR_EMAIL="122027005+jondatkins@users.noreply.github.com"
DOTFILES_DIR="${HOME}/${GITHUB_REPO}"
CONFIG_DIR="${HOME}/.config"
# Set the files to link. These can be for a full arch desktop, or for arch on Windows Subsystem for Linux.
# The default is 'files', i.e. the full arch config.
DESKTOP_CONFIG_FILES="files-desktop"
TERMINAL_CONFIG_FILES="files-terminal"

download=false
link=false
unlink=false
install=false
runall=false
terminal=false
config_files=$DESKTOP_CONFIG_FILES

while getopts dluit flag; do
  case "${flag}" in
  d)
    download=true
    runall=false
    ;;
  l)
    link=true
    runall=false
    ;;
  u)
    unlink=true
    runall=false
    ;;
  i)
    install=true
    runall=false
    ;;
  t)
    terminal=true
    config_files=$TERMINAL_CONFIG_FILES
    ;;
  esac
done

_process() {
  echo "$(date) PROCESSING:  $@" >>$LOG
  printf "$(tput setaf 6) %s...$(tput sgr0)\n" "$@"
}

_success() {
  local message=$1
  printf "%s✓ Success:%s\n" "$(tput setaf 2)" "$(tput sgr0) $message"
}

download_dotfiles() {
  _process "→ Creating directory at ${DOTFILES_DIR} and setting permissions"
  mkdir -p "${DOTFILES_DIR}"

  _process "→ Downloading repository to /tmp directory"
  curl -#fLo /tmp/${GITHUB_REPO}.tar.gz "https://github.com/${GITHUB_USER}/${GITHUB_REPO}/tarball/main"

  _process "→ Extracting files to ${DOTFILES_DIR}"
  tar -zxf /tmp/${GITHUB_REPO}.tar.gz --strip-components 1 -C "${DOTFILES_DIR}"

  _process "→ Removing tarball from /tmp directory"
  rm -rf /tmp/${GITHUB_REPO}.tar.gz

  [[ $? ]] && _success "${DOTFILES_DIR} created, repository downloaded and extracted"

  # Change to the dotfiles directory
  cd "${DOTFILES_DIR}"
}

download_dotfiles_with_git() {
  # Don't download if dotfiles dir is already installed.
  if [ -d "$DOTFILES_DIR" ]; then
    _process "→ $DOTFILES_DIR already downloaded"
    return
  fi
  _process "→ Installing git if needed"
  if ! command -v git &>/dev/null; then
    _process "→ Installing git"
    sudo pacman -S --needed --noconfirm git
  else
    _process "→ git is already installed"
  fi
  cd ${HOME}
  rm -rf ${DOTFILES_DIR}
  _process "→ cloing dotfiles repo from:"
  _process "→ https://github.com/${GITHUB_USER}/${GITHUB_REPO}"
  git clone "https://github.com/${GITHUB_USER}/${GITHUB_REPO}" ${DOTFILES_DIR}

  [[ $? ]] && _success "${DOTFILES_DIR} created, repository cloned"
  # Change to the dotfiles directory
  cd "${DOTFILES_DIR}"
}

installTerminalPackages() {
  sudo pacman -S --needed --confirm - <terminalpackages.txt
}

installDesktopPackages() {
  echo 'foo'
}

installAllPackages() {
  sudo pacman -S - <pkglist.txt
}

# Takes a boolean arg. If true, link the files, if false, unlink them.
link_dotfiles() {
  # Create config dir here if it doesn't already exist
  if [ ! -d $CONFIG_DIR ]; then
    _process "→ $CONFIG_DIR "
    mkdir $CONFIG_DIR
    return
  fi
  # symlink files to the HOME directory.
  if ! [[ -f "${DOTFILES_DIR}/opt/$config_files" ]]; then
    echo "no config file ${DOTFILES_DIR}/opt/$config_files"
    return
  else
    # Set variable for list of files
    # files="${DOTFILES_DIR}/opt/$config_files"
    terminal_files="${DOTFILES_DIR}/opt/$TERMINAL_CONFIG_FILES"
    desktop_files="${DOTFILES_DIR}/opt/$DESKTOP_CONFIG_FILES"
    # Store IFS separator within a temp variable
    OIFS=$IFS
    # Set the separator to a carriage return & a new line break
    # read in passed-in file and store as an array
    IFS=$'\r\n'
    # Only symlink terminal applications for Windows Subsystem for Linux.
    links=($(cat "${terminal_files}"))

    if [ "$terminal" = false ]; then
      # here, it's a full desktop install, so use both opt files
      links=($(cat "${terminal_files}" "${desktop_files}"))
    fi
    # Loop through array of files
    for index in ${!links[*]}; do
      for link in ${links[$index]}; do
        # set IFS back to space to split string on
        IFS=$' '
        # create an array of line items
        file=(${links[$index]})
        # This is where the config file is in my dotfiles
        configFilePath=${file[0]}
        # This is where I want to put the file, relative to my home directory
        symLinkFilePath=${file[1]}
        # This is the path to my home directory
        userConfigPath="/home/$USER/"
        symLinkFilePath=$userConfigPath$symLinkFilePath
        if [ ! $configFilePath ] || [ ! $symLinkFilePath ]; then
          process "→ link script expects 'files' data in the form:"
          process "→ path/to/config path/to/symlink"
          process "→ Your config is:"
          process "→ ${configFilePath} ${symLinkFilePath}"
          return
        fi
        if [ "$1" = false ]; then
          echo 'unlink files'
          echo ${symLinkFilePath}
          # -e flag checks for files and directories, -f is only for files, -d only for directories
          if [ -e ${symLinkFilePath} ]; then
            _process "→ removing symlink ${symLinkFilePath}"
            rm ${symLinkFilePath}
          else
            echo "${symLinkFilePath} does not exist"
          fi
        else
          # If there's no directory '-d', and no symlink '-L', create the symlink.
          # Otherwise, do nothing, so only newly linked config should display in the
          # _process message.
          if ! [ -d ${symLinkFilePath} ]; then
            if ! [ -L ${symLinkFilePath} ]; then
              _process "→ creating link "${DOTFILES_DIR}/${configFilePath}" "${symLinkFilePath}""
              ln -fsnT "${DOTFILES_DIR}/${configFilePath}" "${symLinkFilePath}"
            fi
          fi
        fi
      done
      # set separater back to carriage return & new line break
      IFS=$'\r\n'
    done
    # Reset IFS back
    IFS=$OIFS
    # [ -f ${HOME}/.zshenv ] && source "${HOME}/.zshenv"
    exec zsh
    [[ $? ]] && _success "All files have been copied"
  fi
}

install_node() {
  if ! type -P 'npm' &>/dev/null; then
    _process "→ Installing node"

    curl https://www.npmjs.org/install.sh | sh

    [[ $? ]] &&
      _success "Installed npm"
  fi
}

install_arch_dependencies() {
  source installDeps.sh
}

setup_git_authorship() {
  GIT_AUTHOR_NAME=eval "git config user.name"
  GIT_AUTHOR_EMAIL=eval "git config user.email"

  if [[ ! -z "$GIT_AUTHOR_NAME" ]]; then
    _process "→ Setting up Git author"

    read USER_GIT_AUTHOR_NAME
    if [[ ! -z "$USER_GIT_AUTHOR_NAME" ]]; then
      GIT_AUTHOR_NAME="${USER_GIT_AUTHOR_NAME}"
      $(git config --global user.name "$GIT_AUTHOR_NAME")
    else
      _warning "No Git user name has been set.  Please update manually"
    fi

    read USER_GIT_AUTHOR_EMAIL
    if [[ ! -z "$USER_GIT_AUTHOR_EMAIL" ]]; then
      GIT_AUTHOR_EMAIL="${USER_GIT_AUTHOR_EMAIL}"
      $(git config --global user.email "$GIT_AUTHOR_EMAIL")
    else
      _warning "No Git user email has been set.  Please update manually"
    fi
  else
    _process "→ Git author already set, moving on..."
  fi
}

# If no flags are passed, run the dowload, unlink, link and install-dependencies functions.
# Then return (other flags will be false anyway, but I think returning here is more robust)
# If a flag or flags are set, 'runall' should be false, so other functions should run as
# expected.
# N.B. Some of the functions, e.g. the node install and homebrew functions are not called
# at all.
install() {
  if [ "$runall" == true ]; then
    _process "→ run all install functions"
    # download_dotfiles_with_git
    # link_dotfiles true
    # install_arch_dependencies
    _process "→ dotfiles downloaded and linked"
    return
  fi

  if [ "$download" == true ]; then
    echo "download dotfiles here"
    download_dotfiles_with_git
  fi
  if [ "$unlink" == true ]; then
    echo "unlink dotfiles"
    link_dotfiles false
  fi
  if [ "$link" == true ]; then
    echo "link dotfiles"
    echo $config_files
    link_dotfiles true
  fi
  if [ "$install" == true ]; then
    echo "install deps"
    # install_arch_dependencies
  fi
}

install
